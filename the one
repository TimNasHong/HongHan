2023.8.7
//main
public class zhu {
    public static void main(String[] args) {
       Outer a=new Outer();
       a.show();
       a.out2();
       a.method();
       Outer.Iner2 c=new Outer().new Iner2();
       c.out();

    }
}
//接口
public interface Inter {
    void outPut();
}

//outer类
public class Outer {
    private String name="lishimin";
//1.匿名内部类
    public void show()
    {
        System.out.println("内部类");
        new Inter(){
            public void outPut(){
                System.out.println("匿名内部类");
            }
        }.outPut();
    }
//2.成员内部类，私人
    private class Iner{
        public void out(){
            System.out.println("1");
            System.out.println(name);
        }
 }
//3.成员内部类，公开
    public class Iner2{
        public void out(){
            System.out.println("2");
            System.out.println(name);
        }
    }
    public void out2(){
        Iner a=new Iner();
        a.out();
    }
//4.局部内部类
    public void method(){
        class way{
            public void output(){
                System.out.println("this is a way");
            }
        }
        way d=new way();
        d.output();
    }

}
----------------------------------------------------------------------------------------------------------------------------------------------------------
//随机数生成
Random a=new Random();
int c=a.nextInt(100)+1;
//输出1到100的随机数
----------------------------------------------------------------------------------------------------------------------------------------------------------
//转换
//String--->int
String a="1000";
int c=Integer.parseInt(a);
System.out.println(c);
//int--->String
int f=1000;
String v=String.valueOf(f);
System.out.println(v);
----------------------------------------------------------------------------------------------------------------------------------------------------------
//字符串转换成数组，排序后转换成字符串
//String--->int--->StringBuilder--->String
String a="95 12 45 63 11 20";
       String[] arr=a.split(" ");
       int []d=new int[arr.length];
//String--->int
       for(int i=0;i<arr.length;i++)
       {
           d[i]=Integer.parseInt(arr[i]);
       }
//排序
        Arrays.sort(d);
        StringBuilder e=new StringBuilder();
//int--->StringBuilder
        for(int i=0;i<arr.length;i++)
        {
            if(i==arr.length-1)
                e.append(d[i]);
            else
                e.append(d[i]).append(" ");
        }
//StringBuilder--->String
        String v=e.toString();
        System.out.println(v);
-----------------------------------------------------------------------------------------------------------------------------------------------------------
//获取时间
Date s=new Date();
System.out.println(s);
long t=System.currentTimeMillis();//System.currentTimeMillis()1970距今的毫秒值
s.setTime(t);
System.out.println(s);
------------------------------------------------------------------------------------------------------------------------------------------------------------
//Date-->String
Date a=new Date();
SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd- HH:mm:ss");
String d=sdf.format(a);
System.out.println(d);
//String-->Date
String t="2023-8-8 20:35:00";
Date dd=sdf.parse(t);
System.out.println(dd);
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Calendar rightnow=Calendar.getInstance();
        System.out.println(rightnow);
//------------------------------------------
        Scanner scanner=new Scanner(System.in);
        System.out.println("亲输入年份");
        int date=scanner.nextInt();
//求二月天
        Calendar sdf2=Calendar.getInstance();
        sdf2.set(date,2,1);
        sdf2.add(Calendar.DATE,-1);
        int day=sdf2.get(Calendar.DATE);
        System.out.println(day);
-----------------------------------------------------------------------------------------------------------------------------------------------------------
//异常检测
public static void main(String[] args) throws ParseException {
       System.out.println("start");
        method();
        System.out.println("end");
}
public static void method(){
try{
    int []arr={1,2,3};
    System.out.println(arr[3]);
}
catch(ArrayIndexOutOfBoundsException a){
    System.out.println("超过数组索引");
}
----------------------------------------------------------------------------------------------------------------------------------------------------------
Collection<String>a=new ArrayList<String>();
     a.add("hello");
        a.add("java");
        a.add("world");
        Iterator<String>it=a.iterator();//迭代器
        while(it.hasNext())
        {
            String s=it.next();
            System.out.println(s);
        }
-----------------------------------------------------------------------------------------------------------------------------------------------------------
public class Student implements Comparable<Student>{
...................................
@Override//自然排序，comparable
    public int compareTo(Student s) {
       int a=this.age-s.getAge();

        int num=a==0?this.name.compareTo(s.name):a;
        return num;
        //return 0输出一个
        //return 1;//正序输出
        //return -1;//逆序输出
    }
}
public class zhu {
    public static void main(String[] args){
       TreeSet<Student>a=new TreeSet<Student>(new Comparator<Student>() {
//比较器排序，comparator
           @Override
           public int compare(Student o1, Student o2) {
               int a=o1.getAge()-o2.getAge();
               int num=a==0?o1.getName().compareTo(o2.getName()):a;
               return num;
           }
       });
       Student s=new Student("qwe",18);
       Student s1=new Student("asd",13);
       Student s2=new Student("zxc",14);
       a.add(s);
       a.add(s1);
       a.add(s2);
       for(Student c: a)
       {
           System.out.println(c.getAge()+c.getName());
       }
 }
-----------------------------------------------------------------------------------------------------------------------------------------------------------
List<String>list=Arrays.alist("...","...","...")//返回指定数组支持的固定大小
List<String>list=List.of("...","...","...")//元素不可变的列表
Set<String>set=Set.of("...","...","...")//元素不可变的集合
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Map<String,String>set=new HashMap<String,String>();
       set.put("qwe","rty");
       set.put("asd","fgh");
       set.put("zxc","vbn");
       Set<String>a=set.keySet();//keySet()获取键的集合
       for(String s:a){
           System.out.println(s);
       }
       Collection<String>c=set.values();//Collection<> values()获取值的集合
       for(String k:c)
           System.out.println(k);
-----------------------------------------------------------------------------------------------------------------------------------------------------------
//Map.Entry获取键对
Set<Map.Entry<String,String>> fg=set.entrySet();
       for(Map.Entry<String,String> d:fg)
       {
           String q=d.getKey();
           String w=d.getValue();
           System.out.println(q+","+w);
       }

//1.线程上锁，synchronized
public class MyRunable implements Runnable {
    private int ticket=100;
    private Object obj=new Object();
    @Override
    public synchronized void run() {
            while (ticket > 0) {
                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println(Thread.currentThread().getName() + "," + ticket);
                ticket--;}
    }
}
public class zhu {
    public static void main(String[] args) throws IOException, ClassNotFoundException {
        MyRunable run = new MyRunable();
        Thread t1=new Thread(run,"线程1");
        Thread t2=new Thread(run,"线程2");
        Thread t3=new Thread(run,"线程3");
        t1.start();
        t2.start();
        t3.start();
    }

//2.Lock上锁，lock
public class MyRunable implements Runnable {
    private int ticket=100;
    private Object obj=new Object();
    private Lock lock=new ReentrantLock();
    @Override
    public synchronized void run() {
        while (ticket > 0) {
            try {
                lock.lock();
                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println(Thread.currentThread().getName() + "," + ticket);
                ticket--;
            } finally {
                lock.unlock();
            }
        }
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------
//@
public class Box  {
    private int milk;
    private boolean isEmpty=false;//表示牛奶箱中有牛奶
    public synchronized void get(){

        if(!isEmpty)
        {
            try {
                wait();
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }
        System.out.println("用户拿出"+this.milk+"瓶奶");
        isEmpty=false;
        notifyAll();
    }
    public synchronized void put(int milk){
        if(isEmpty){
            try {
                wait();
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }
        this.milk=milk;
        System.out.println("工作人员放入"+this.milk+"瓶奶");
        isEmpty=true;
        notifyAll();
    }

}
public class Producer implements Runnable{
    private  Box b;
    public Producer(Box b){
        this.b=b;
    }
    public void run(){
        for(int i=1;i<=5;i++)
        {
            b.put(i);
        }
    }
}
public class Cusstomer implements Runnable{
    private Box b;
    public Cusstomer(Box b){
        this.b=b;
    }

    @Override
    public void run() {
        while(true)
        {
            b.get();
        }

    }
}public class zhu {
    public static void main(String[] args) throws IOException, ClassNotFoundException {
        Box b=new Box();
        Producer p=new Producer(b);
        Cusstomer c=new Cusstomer(b);
        Thread p1=new Thread(p);
        Thread c1=new Thread(c);
        p1.start();
        c1.start();
    }
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//获取ip地址和主机名
public static void main(String[] args) throws IOException, ClassNotFoundException {
        InetAddress name=InetAddress.getByName("LAPTOP-331NMUN6");
        String ipname=name.getHostName();
        String adress=name.getHostAddress();
        System.out.println(ipname+","+adress);
    }
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//发送端
public class zhu {
    public static void main(String[] args) throws IOException, ClassNotFoundException {
        DatagramSocket ds=new DatagramSocket();
        byte[]datas="this my computer!".getBytes();
        DatagramPacket dp=new DatagramPacket(datas,datas.length,InetAddress.getByName("LAPTOP-331NMUN6"),123);
        ds.send(dp);
        ds.close();
    }
}
//接收端
public class othermain {
    public static void main(String[] args) throws IOException {
        DatagramSocket ds=new DatagramSocket(123);
        byte[]newdata=new byte[1024];
        DatagramPacket dp=new DatagramPacket(newdata,newdata.length);
        ds.receive(dp);
        String s=new String(dp.getData(),0,dp.getLength());
        System.out.println(s);
        ds.close();
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//发送端
public class zhu {
    public static void main(String[] args) throws IOException, ClassNotFoundException {
       DatagramSocket ds=new DatagramSocket();
        System.out.println("请输入:");
       BufferedReader bw=new BufferedReader(new InputStreamReader(System.in));
       byte[]data=new byte[1024];
       String line;
       while((line=bw.readLine())!=null)
       {
           data=line.getBytes();
           DatagramPacket dp=new DatagramPacket(data,data.length,InetAddress.getByName("LAPTOP-331NMUN6"),1234);
           ds.send(dp);

       }
       ds.close();

    }
}
//接收端
public class othermain {
    public static void main(String[] args) throws IOException {
        DatagramSocket da=new DatagramSocket(1234);
        while(true)
        {
            byte[]data=new byte[1024];
            DatagramPacket dp = new DatagramPacket(data,data.length);
            da.receive(dp);

            String se=new String(dp.getData(),0,dp.getLength());
            System.out.println(se);

        }

    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------

public class zhu {
    public static void main(String[] args) throws IOException, ClassNotFoundException {

        BufferedReader b = new BufferedReader(new FileReader("C:\\javademo\\bbc.txt"));
        Socket s = new Socket("LAPTOP-331NMUN6", 2500);
        //获取输出流
        BufferedWriter bd = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));
        String s1;
        //输入数据
        while ((s1 = b.readLine()) != null) {
            bd.write(s1);
            bd.newLine();
            bd.flush();
        }
        b.close();
        bd.close();
        s.close();
    }
}

public class othermain {
    public static void main(String[] args) throws IOException {
        ServerSocket ss = new ServerSocket(2500);
        Socket s = ss.accept();
        BufferedReader br = new BufferedReader(new InputStreamReader(s.getInputStream()));
        String g;
        while ((g = br.readLine()) != null) {
            System.out.println(g);
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------
//服务器
public class othermain {
    public static void main(String[] args) throws IOException {
        ServerSocket ss = new ServerSocket(2500);
        Socket s = ss.accept();
        BufferedReader br = new BufferedReader(new InputStreamReader(s.getInputStream()));
        String g;
        while ((g = br.readLine()) != null) {
            System.out.println(g);
        }
        s.shutdownInput();
        BufferedWriter brservic = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));
        String sss = "已上传";
        brservic.write(sss);
        brservic.close();
        br.close();
        s.close();
    }
}
//客户端
public class zhu {
    public static void main(String[] args) throws IOException, ClassNotFoundException {
        Socket s = new Socket("LAPTOP-331NMUN6", 2500);
        BufferedReader br = new BufferedReader(new FileReader("C:\\javademo\\bbc.txt"));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));
        String data;
        while ((data = br.readLine()) != null) {
            bw.write(data);
            bw.newLine();
            bw.flush();
        }
        s.shutdownOutput();
        BufferedReader bwservic = new BufferedReader(new InputStreamReader(s.getInputStream()));
        String over = bwservic.readLine();
        System.out.println("数据" + over);
        bwservic.close();
        bw.close();
        br.close();
        s.close();
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------
//Supplier型接口
public class zhu {
    public static void main(String[] args) throws IOException, ClassNotFoundException {
      int[]a={10,12,4,5,6,2};
      int s=getMax(()->Math.max(a[0],a[a.length-1]));
        System.out.println(s);
    }
    private static Integer getMax(Supplier<Integer>p){
        return p.get();
    }
}
//Consumer型接口
public class zhu {
    public static void main(String[] args) throws IOException, ClassNotFoundException {
        String[] s = {"qwe,12", "asd,45", "zxc,88"};
        getString(s,str-> System.out.println(new StringBuilder(str).reverse().toString()),str-> System.out.println(str));
        System.out.println("-------------");
        getString(s,str-> System.out.print("姓名"+str.split(",")[0]),str-> System.out.println(",年龄"+Integer.parseInt(str.split(",")[1])));
    }
    private static  void getString(String[]s, Consumer<String>con1,Consumer<String>con2){
        for(String str:s)
        con1.andThen(con2).accept(str);
    }
}
//Predicate型接口
public class zhu {
    public static void main(String[] args) throws IOException, ClassNotFoundException {
        String s="qweasdzxc";
        boolean a=predict(s,str->str.length()>5,str->str.length()<15);
        System.out.println(a);
    }
    private  static  boolean predict(String s, Predicate<String>p1,Predicate<String>p2){
        return p1.and(p2).test(s);
        //return p1.or(p2).test(s);
        //return p1.negate(p2).test(s);
        }
}
